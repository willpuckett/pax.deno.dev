// Run `deno task hooks:install` to install hooks
{
  "lock": false,
  "tasks": {
    // Starts local server
    "server": "deno -RNE --watch server.ts",
    // Updates dependencies with ensuring pass tests
    "deps": "deno -A https://deno.land/x/udd/main.ts deno.jsonc --test=\"deno task test\"",
    // Runs lint
    "lint": "deno lint --ignore=cov_profile",
    // Runs format
    "fmt": "deno fmt --ignore=cov_profile",
    // Hooks install
    "hooks:install": "deno -R=deno.json,deno.jsonc,.git/hooks/ -W=.git/hooks/ jsr:@hongminhee/deno-task-hooks",
    // @todo commit-msg not working
    // Lints and formats staged files
    "hooks:pre-commit": "export FILES=$(git diff --staged --name-only --diff-filter=ACMR \"*.ts\") && deno eval \"Deno.env.get('FILES')==='' || Deno.exit(1)\" || ( deno lint \"$FILES\" &&  deno fmt \"$FILES\")",
    // Pre-push hook
    "hooks:pre-push": "deno task test",
    // Runs the tests
    "test": "deno test --reload -R",
    // Shows uncovered lists
    "cov": "deno task test --coverage=cov_profile && deno coverage cov_profile",
    // Runs lint, check format and test
    "ci": "deno task lint && deno task fmt --check && deno task test"
  },
  "imports": {
    "@std/assert": "jsr:@std/assert@^1.0.3",
    "https://deno.land/std/encoding/_yaml/loader/loader.ts": "https://deno.land/std@0.179.0/encoding/_yaml/loader/loader.ts#=",
    "markup_tag": "https://deno.land/x/markup_tag@0.4.0/mod.ts",
    "markdown": "https://deno.land/x/markdown@v2.0.0/mod.ts",
    "ssx/jsx-runtime": "https://deno.land/x/ssx@v0.1.1/jsx-runtime.ts"
  },
  "unstable": [
    "fmt-html",
    "fmt-css",
    "fmt-yaml",
    "fmt-component"
  ],
  "compilerOptions": {
    "jsx": "precompile",
    "jsxImportSource": "ssx"
  }
}
